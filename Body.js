const TelegramBot = require('node-telegram-bot-api');
const sqlite3 = require('sqlite3').verbose();
const path = require('path');

// ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====
// ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====
const TOKEN = process.env.BOT_TOKEN || '8474432468:AAE7xQulaUCRxrCS4iKHxMT3EXXXSHa_ZyQ'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const SERVER_URL = process.env.SERVER_URL || 'https://your-domain.com'; // Render —Å–∞–º –ø–æ–¥—Å—Ç–∞–≤–∏—Ç —Å–≤–æ–π URL
// ========================
// ========================

const bot = new TelegramBot(TOKEN, { polling: true });
const db = new sqlite3.Database(path.join(__dirname, 'calls.db'));

// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–≤–æ–Ω–∫–æ–≤
db.serialize(() => {
  db.run(`
    CREATE TABLE IF NOT EXISTS calls (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      creator_id INTEGER NOT NULL,
      participant_id INTEGER,
      scheduled_time TEXT NOT NULL,
      duration_minutes INTEGER NOT NULL,
      status TEXT DEFAULT 'scheduled',
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )
  `);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const welcomeText = `
üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–æ–≤ –ø—Ä—è–º–æ –≤ Telegram.

*–ö–æ–º–∞–Ω–¥—ã:*
/newcall - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫
/mycalls - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∏

–°–æ–∑–¥–∞–π –∑–≤–æ–Ω–æ–∫, —É–∫–∞–∂–∏ –≤—Ä–µ–º—è –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –∞ —è –ø—Ä–∏—à–ª—é —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Ç–µ–±–µ –∏ —Ç–≤–æ–µ–º—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É!
  `;
  
  bot.sendMessage(chatId, welcomeText, { parse_mode: 'Markdown' });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /newcall
bot.onText(/\/newcall/, (msg) => {
  const chatId = msg.chat.id;
  const steps = {
    askTime: 1,
    askDuration: 2,
    askParticipant: 3
  };
  
  let userState = { step: steps.askTime };
  
  bot.sendMessage(chatId, "üïê *–ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –ø–ª–∞–Ω–∏—Ä—É–µ–º –∑–≤–æ–Ω–æ–∫?*\n–í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú\n–ù–∞–ø—Ä–∏–º–µ—Ä: 2024-12-25 15:30", { parse_mode: 'Markdown' })
    .then(() => {
      // –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      bot.once('message', (timeMsg) => {
        if (timeMsg.chat.id === chatId) {
          userState.time = timeMsg.text;
          userState.step = steps.askDuration;
          
          bot.sendMessage(chatId, "‚è± *–ö–∞–∫–æ–≤–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–≤–æ–Ω–∫–∞?* (–≤ –º–∏–Ω—É—Ç–∞—Ö)\n–ù–∞–ø—Ä–∏–º–µ—Ä: 30", { parse_mode: 'Markdown' })
            .then(() => {
              bot.once('message', (durationMsg) => {
                if (durationMsg.chat.id === chatId) {
                  userState.duration = parseInt(durationMsg.text);
                  userState.step = steps.askParticipant;
                  
                  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–≤–æ–Ω–æ–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                  db.run(
                    `INSERT INTO calls (creator_id, scheduled_time, duration_minutes) VALUES (?, ?, ?)`,
                    [chatId, userState.time, userState.duration],
                    function(err) {
                      if (err) {
                        return bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞");
                      }
                      
                      const callId = this.lastID;
                      const joinLink = `${SERVER_URL}/call.html?call_id=${callId}`;
                      
                      const message = `
‚úÖ *–ó–≤–æ–Ω–æ–∫ —Å–æ–∑–¥–∞–Ω!*

üìÖ –í—Ä–µ–º—è: ${userState.time}
‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${userState.duration} –º–∏–Ω—É—Ç
üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${joinLink}

–ü–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤–∞—à–µ–º—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É!
                      `;
                      
                      bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
                    }
                  );
                }
              });
            });
        }
      });
    });
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
setInterval(() => {
  const now = new Date().toISOString().slice(0, 16).replace('T', ' ');
  
  db.all(
    `SELECT * FROM calls WHERE scheduled_time LIKE ? AND status = 'scheduled'`,
    [`${now}%`],
    (err, rows) => {
      if (err) throw err;
      
      rows.forEach(call => {
        const joinLink = `${SERVER_URL}/call.html?call_id=${call.id}`;
        const message = `üéâ *–í—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞!*\n\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –ø–æ —Å—Å—ã–ª–∫–µ: ${joinLink}`;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é
        bot.sendMessage(call.creator_id, message, { 
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [[
              {
                text: "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∑–≤–æ–Ω–∫—É",
                web_app: { url: joinLink }
              }
            ]]
          }
        });
        
        // –ü–æ–º–µ—á–∞–µ–º –∑–≤–æ–Ω–æ–∫ –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π
        db.run(`UPDATE calls SET status = 'active' WHERE id = ?`, [call.id]);
      });
    }
  );
}, 60000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...');