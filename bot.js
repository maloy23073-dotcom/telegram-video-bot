require('dotenv').config();

const TelegramBot = require('node-telegram-bot-api');
const sqlite3 = require('sqlite3').verbose();
const path = require('path');

// ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====
const TOKEN = process.env.BOT_TOKEN;
const SERVER_URL = process.env.SERVER_URL || 'https://telegram-video-bot-vvfl.onrender.com';

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
const generateJoinToken = () => {
    return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.log('=== BOT STARTING ===');
console.log('BOT_TOKEN:', TOKEN ? '‚úÖ Set' : '‚ùå Not set');
console.log('SERVER_URL:', SERVER_URL);

if (!TOKEN) {
    console.error('‚ùå ERROR: BOT_TOKEN is required!');
    process.exit(1);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
const dbPath = path.join(__dirname, 'database.sqlite');
const db = new sqlite3.Database(dbPath, (err) => {
    if (err) console.error('‚ùå Database error:', err);
    else console.log('‚úÖ Database connected');
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(TOKEN, {
    polling: true,
    request: {
        timeout: 30000
    }
});

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
function initializeDatabase() {
    // –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    db.run(`CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )`, (err) => {
        if (err) console.error('‚ùå Users table error:', err);
        else console.log('‚úÖ Users table ready');
    });

    // –¢–∞–±–ª–∏—Ü–∞ –∑–≤–æ–Ω–∫–æ–≤
    db.run(`CREATE TABLE IF NOT EXISTS calls (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        creator_id INTEGER NOT NULL,
        scheduled_time TEXT NOT NULL,
        duration_minutes INTEGER NOT NULL,
        join_token TEXT NOT NULL,
        title TEXT DEFAULT '',
        status TEXT DEFAULT 'scheduled',
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )`, (err) => {
        if (err) console.error('‚ùå Calls table error:', err);
        else console.log('‚úÖ Calls table ready');
    });

    // –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
    db.run(`CREATE TABLE IF NOT EXISTS invitations (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        call_id INTEGER NOT NULL,
        user_id INTEGER NOT NULL,
        username TEXT NOT NULL,
        status TEXT DEFAULT 'pending',
        invited_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (call_id) REFERENCES calls (id)
    )`, (err) => {
        if (err) console.error('‚ùå Invitations table error:', err);
        else console.log('‚úÖ Invitations table ready');
    });

    // –¢–∞–±–ª–∏—Ü–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    db.run(`CREATE TABLE IF NOT EXISTS notifications (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        call_id INTEGER NOT NULL,
        user_id INTEGER NOT NULL,
        type TEXT NOT NULL,
        sent BOOLEAN DEFAULT FALSE,
        scheduled_time DATETIME NOT NULL,
        FOREIGN KEY (call_id) REFERENCES calls (id)
    )`, (err) => {
        if (err) console.error('‚ùå Notifications table error:', err);
        else console.log('‚úÖ Notifications table ready');
    });
}

// –í—ã–∑–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î
initializeDatabase();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
function saveUser(user) {
    db.run(
        `INSERT OR REPLACE INTO users (user_id, username, first_name, last_name) 
         VALUES (?, ?, ?, ?)`,
        [user.id, user.username, user.first_name, user.last_name],
        (err) => {
            if (err) console.error('‚ùå Save user error:', err);
        }
    );
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø—Ä–∏ –ª—é–±–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
bot.on('message', (msg) => {
    if (msg.from) {
        saveUser(msg.from);
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
bot.on('error', (error) => console.error('‚ùå Bot error:', error));
bot.on('polling_error', (error) => console.error('‚ùå Polling error:', error));

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
bot.getMe()
    .then((me) => console.log(`‚úÖ Bot @${me.username} started`))
    .catch((error) => {
        console.error('‚ùå Bot auth failed:', error);
        process.exit(1);
    });

// ===== –ö–û–ú–ê–ù–î–ê /start =====
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    const text = `
üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–æ–≤ –≤ Telegram.

üìã –ö–æ–º–∞–Ω–¥—ã:
/newcall - –°–æ–∑–¥–∞—Ç—å –∑–≤–æ–Ω–æ–∫
/mycalls - –ú–æ–∏ –∑–≤–æ–Ω–∫–∏
/invite - –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
/help - –ü–æ–º–æ—â—å
    `;
    bot.sendMessage(chatId, text).catch(console.error);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—É–±–ª–∏—á–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
bot.onText(/\/start join_(\d+)_(.+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const callId = match[1];
    const token = match[2];

    db.get(`SELECT * FROM calls WHERE id = ? AND join_token = ?`, [callId, token], (err, call) => {
        if (err || !call) {
            return bot.sendMessage(chatId, "‚ùå –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–ª–∏ expired");
        }

        const joinLink = `${SERVER_URL}/call.html?call_id=${callId}&token=${token}`;

        const message = `
üéâ *–í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –Ω–∞ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫!*

üìÖ *–í—Ä–µ–º—è:* ${call.scheduled_time}
‚è± *–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* ${call.duration_minutes} –º–∏–Ω—É—Ç

üîó *–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è:* ${joinLink}

*–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –≤—ã—à–µ —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∑–≤–æ–Ω–∫—É!*
        `;

        bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
    });
});

// ===== –ö–û–ú–ê–ù–î–ê /help =====
bot.onText(/\/help/, (msg) => {
    const chatId = msg.chat.id;
    const text = `
üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

üìû /newcall - –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫
üìã /mycalls - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –∑–≤–æ–Ω–∫–∏
üë• /invite [ID] @username - –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚úÖ /accept [ID] - –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
‚ùå /decline [ID] - –û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
‚ùå /cancelcall [ID] - –û—Ç–º–µ–Ω–∏—Ç—å –∑–≤–æ–Ω–æ–∫

üí° –ü—Ä–∏–º–µ—Ä—ã:
/invite 5 @username
/accept 5
/decline 5
/cancelcall 5
    `;
    bot.sendMessage(chatId, text).catch(console.error);
});

// ===== –ö–û–ú–ê–ù–î–ê /newcall =====
bot.onText(/\/newcall/, async (msg) => {
    const chatId = msg.chat.id;

    try {
        // –®–∞–≥ 1: –ó–∞–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏
        await bot.sendMessage(chatId, "üïê –ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è? (–§–æ—Ä–º–∞—Ç: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú)\n–ü—Ä–∏–º–µ—Ä: 2024-12-25 15:30");

        const timeMsg = await new Promise((resolve, reject) => {
            const handler = (msg) => {
                if (msg.chat.id === chatId) {
                    bot.removeListener('message', handler);
                    resolve(msg);
                }
            };
            bot.on('message', handler);
            setTimeout(() => reject(new Error('Timeout')), 60000);
        });

        // –®–∞–≥ 2: –ó–∞–ø—Ä–æ—Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        await bot.sendMessage(chatId, "‚è± –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö?\n–ü—Ä–∏–º–µ—Ä: 30");

        const durationMsg = await new Promise((resolve, reject) => {
            const handler = (msg) => {
                if (msg.chat.id === chatId) {
                    bot.removeListener('message', handler);
                    resolve(msg);
                }
            };
            bot.on('message', handler);
            setTimeout(() => reject(new Error('Timeout')), 60000);
        });

        const duration = parseInt(durationMsg.text);
        if (isNaN(duration) || duration < 1) {
            return bot.sendMessage(chatId, "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0");
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞
        const joinToken = generateJoinToken();

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î —Å –ø—É–±–ª–∏—á–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
        await new Promise((resolve, reject) => {
            db.run(
                `INSERT INTO calls (creator_id, scheduled_time, duration_minutes, join_token) VALUES (?, ?, ?, ?)`,
                [chatId, timeMsg.text, duration, joinToken],
                function(err) {
                    if (err) return reject(err);
                    resolve({ callId: this.lastID, joinToken });
                }
            );
        }).then(async ({ callId, joinToken }) => {
            const joinLink = `${SERVER_URL}/call.html?call_id=${callId}&token=${joinToken}`;
            const publicInviteLink = `https://t.me/${bot.options.username}?start=join_${callId}_${joinToken}`;

            const message = `
‚úÖ *–ó–≤–æ–Ω–æ–∫ —Å–æ–∑–¥–∞–Ω!*

üìÖ *–í—Ä–µ–º—è:* ${timeMsg.text}
‚è± *–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* ${duration} –º–∏–Ω—É—Ç
üéØ *ID –∑–≤–æ–Ω–∫–∞:* ${callId}

üîó *–ü—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:*
${joinLink}

üì© *–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ Telegram:*
${publicInviteLink}

*–õ—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –ø–æ —ç—Ç–∏–º —Å—Å—ã–ª–∫–∞–º!*
            `;

            await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
        });

    } catch (error) {
        console.error('Newcall error:', error);
        bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /newcall —Å–Ω–æ–≤–∞");
    }
});

// ===== –ö–û–ú–ê–ù–î–ê /mycalls =====
bot.onText(/\/mycalls/, (msg) => {
    const chatId = msg.chat.id;

    db.all(`SELECT * FROM calls WHERE creator_id = ? ORDER BY created_at DESC`, [chatId], (err, calls) => {
        if (err) {
            console.error('Mycalls error:', err);
            return bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–≤–æ–Ω–∫–æ–≤");
        }

        if (calls.length === 0) {
            return bot.sendMessage(chatId, "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤");
        }

        let message = "üìã –í–∞—à–∏ –∑–≤–æ–Ω–∫–∏:\n\n";

        calls.forEach(call => {
            const joinLink = `${SERVER_URL}/call.html?call_id=${call.id}&token=${call.join_token}`;
            message += `üéØ ID: ${call.id}\n`;
            message += `üìÖ –í—Ä–µ–º—è: ${call.scheduled_time}\n`;
            message += `‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${call.duration_minutes} –º–∏–Ω\n`;
            message += `üîó –°—Å—ã–ª–∫–∞: ${joinLink}\n`;
            message += `üìä –°—Ç–∞—Ç—É—Å: ${call.status}\n`;
            message += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
        });

        bot.sendMessage(chatId, message);
    });
});

// ===== –ö–û–ú–ê–ù–î–ê /invite =====
bot.onText(/\/invite(?: (\d+)(?: (@\w+))?)?/, (msg, match) => {
    const chatId = msg.chat.id;
    const callId = match[1];
    const username = match[2];

    if (!callId) {
        return bot.sendMessage(chatId, "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–≤–æ–Ω–∫–∞\n–ü—Ä–∏–º–µ—Ä: /invite 5 @username");
    }

    if (!username) {
        return bot.sendMessage(chatId, "‚ùå –£–∫–∞–∂–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n–ü—Ä–∏–º–µ—Ä: /invite 5 @username");
    }

    const cleanUsername = username.replace('@', '').toLowerCase();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–∞ –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    db.get(`SELECT * FROM calls WHERE id = ? AND creator_id = ?`, [callId, chatId], (err, call) => {
        if (err) {
            console.error('Invite error:', err);
            return bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö");
        }

        if (!call) {
            return bot.sendMessage(chatId, "‚ùå –ó–≤–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è");
        }

        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –ø–æ username
        db.get(`SELECT user_id FROM users WHERE username = ?`, [cleanUsername], (err, user) => {
            if (err) {
                console.error('Find user error:', err);
                return bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            }

            if (!user) {
                return bot.sendMessage(chatId, `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${cleanUsername} –Ω–µ –Ω–∞–π–¥–µ–Ω. 
                
–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
1. –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º @${bot.options.username}
2. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /start
3. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –º–æ–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –µ–≥–æ again`);
            }

            const userId = user.user_id;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–≥–ª–∞—à–∞–ª–∏ –ª–∏ —É–∂–µ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db.get(`SELECT * FROM invitations WHERE call_id = ? AND user_id = ?`, [callId, userId], (err, existingInvite) => {
                if (err) {
                    console.error('Check existing invite error:', err);
                    return bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è");
                }

                if (existingInvite) {
                    return bot.sendMessage(chatId, `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${cleanUsername} —É–∂–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω –Ω–∞ —ç—Ç–æ—Ç –∑–≤–æ–Ω–æ–∫`);
                }

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –ë–î
                db.run(
                    `INSERT INTO invitations (call_id, user_id, username, status) VALUES (?, ?, ?, ?)`,
                    [callId, userId, cleanUsername, 'pending'],
                    function(err) {
                        if (err) {
                            console.error('Invitation error:', err);
                            return bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è");
                        }

                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        sendInvitation(userId, call, msg.from.username)
                            .then(() => {
                                bot.sendMessage(chatId, `‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @${cleanUsername}`);

                                // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –∑–≤–æ–Ω–∫–∞
                                const callTime = new Date(call.scheduled_time);
                                const notificationTime = new Date(callTime.getTime() - 5 * 60000);

                                db.run(
                                    `INSERT INTO notifications (call_id, user_id, type, scheduled_time) VALUES (?, ?, ?, ?)`,
                                    [callId, userId, '5min_reminder', notificationTime.toISOString()]
                                );
                            })
                            .catch(error => {
                                console.error('Send invitation error:', error);
                                bot.sendMessage(chatId, `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @${cleanUsername}. 
                                
–í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.`);
                            });
                    }
                );
            });
        });
    });
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
function sendInvitation(userId, call, inviterUsername) {
    return new Promise((resolve, reject) => {
        const joinLink = `${SERVER_URL}/call.html?call_id=${call.id}&token=${call.join_token}`;

        const inviteMessage = `
üéâ –í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –Ω–∞ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫!

üìÖ –í—Ä–µ–º—è: ${call.scheduled_time}
‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${call.duration_minutes} –º–∏–Ω—É—Ç
üë§ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: @${inviterUsername}

üîó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è: ${joinLink}
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        const keyboard = {
            inline_keyboard: [
                [
                    { text: "‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data: `accept_${call.id}` },
                    { text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data: `decline_${call.id}` }
                ],
                [
                    { text: "üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–≤–æ–Ω–∫—É", url: joinLink }
                ]
            ]
        };

        bot.sendMessage(userId, inviteMessage, { reply_markup: keyboard })
            .then(() => resolve())
            .catch(error => reject(error));
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫
bot.on('callback_query', (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;
    const messageId = callbackQuery.message.message_id;

    if (data.startsWith('accept_')) {
        const callId = data.replace('accept_', '');
        handleAcceptInvitation(chatId, callId, messageId);
    } else if (data.startsWith('decline_')) {
        const callId = data.replace('decline_', '');
        handleDeclineInvitation(chatId, callId, messageId);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
function handleAcceptInvitation(chatId, callId, messageId) {
    db.run(
        `UPDATE invitations SET status = 'accepted' WHERE call_id = ? AND user_id = ?`,
        [callId, chatId],
        function(err) {
            if (err) {
                console.error('Accept error:', err);
                return bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è");
            }

            if (this.changes === 0) {
                return bot.sendMessage(chatId, "‚ùå –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
            }

            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–≤–æ–Ω–∫–µ
            db.get(`SELECT * FROM calls WHERE id = ?`, [callId], (err, call) => {
                if (err || !call) {
                    bot.answerCallbackQuery({ callback_query_id: messageId, text: "‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ" });
                    return bot.sendMessage(chatId, "‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ");
                }

                const joinLink = `${SERVER_URL}/call.html?call_id=${callId}&token=${call.join_token}`;
                const message = `
‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –∑–≤–æ–Ω–æ–∫!

üìÖ ${call.scheduled_time}
‚è± ${call.duration_minutes} –º–∏–Ω—É—Ç
üîó ${joinLink}

–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞.
                `;

                if (messageId) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º
                    bot.editMessageText("‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ", {
                        chat_id: chatId,
                        message_id: messageId
                    });
                }

                bot.sendMessage(chatId, message);

                // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
                db.get(`SELECT username FROM users WHERE user_id = ?`, [chatId], (err, user) => {
                    const username = user && user.username ? `@${user.username}` : '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
                    bot.sendMessage(call.creator_id, `‚úÖ ${username} –ø—Ä–∏–Ω—è–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –∑–≤–æ–Ω–æ–∫`);
                });

                if (messageId) {
                    bot.answerCallbackQuery({ callback_query_id: messageId, text: "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!" });
                }
            });
        }
    );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
function handleDeclineInvitation(chatId, callId, messageId) {
    db.run(
        `UPDATE invitations SET status = 'declined' WHERE call_id = ? AND user_id = ?`,
        [callId, chatId],
        function(err) {
            if (err) {
                console.error('Decline error:', err);
                return bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è");
            }

            // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            db.run(`DELETE FROM notifications WHERE call_id = ? AND user_id = ?`, [callId, chatId]);

            if (messageId) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                bot.editMessageText("‚ùå –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ", {
                    chat_id: chatId,
                    message_id: messageId
                });
            }

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
            db.get(`SELECT * FROM calls WHERE id = ?`, [callId], (err, call) => {
                if (!err && call) {
                    db.get(`SELECT username FROM users WHERE user_id = ?`, [chatId], (err, user) => {
                        const username = user && user.username ? `@${user.username}` : '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
                        bot.sendMessage(call.creator_id, `‚ùå ${username} –æ—Ç–∫–ª–æ–Ω–∏–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –∑–≤–æ–Ω–æ–∫`);
                    });
                }
            });

            if (messageId) {
                bot.answerCallbackQuery({ callback_query_id: messageId, text: "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ" });
            }
        }
    );
}

// ===== –ö–û–ú–ê–ù–î–ê /accept =====
bot.onText(/\/accept(?: (\d+))?/, (msg, match) => {
    const chatId = msg.chat.id;
    const callId = match[1];

    if (!callId) {
        return bot.sendMessage(chatId, "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–≤–æ–Ω–∫–∞\n–ü—Ä–∏–º–µ—Ä: /accept 5");
    }

    handleAcceptInvitation(chatId, callId, null);
});

// ===== –ö–û–ú–ê–ù–î–ê /decline =====
bot.onText(/\/decline(?: (\d+))?/, (msg, match) => {
    const chatId = msg.chat.id;
    const callId = match[1];

    if (!callId) {
        return bot.sendMessage(chatId, "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–≤–æ–Ω–∫–∞\n–ü—Ä–∏–º–µ—Ä: /decline 5");
    }

    handleDeclineInvitation(chatId, callId, null);
});

// ===== –ö–û–ú–ê–ù–î–ê /cancelcall =====
bot.onText(/\/cancelcall(?: (\d+))?/, (msg, match) => {
    const chatId = msg.chat.id;
    const callId = match[1];

    if (!callId) {
        return bot.sendMessage(chatId, "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–≤–æ–Ω–∫–∞\n–ü—Ä–∏–º–µ—Ä: /cancelcall 5");
    }

    db.get(`SELECT * FROM calls WHERE id = ? AND creator_id = ?`, [callId, chatId], (err, call) => {
        if (err) {
            console.error('Cancelcall error:', err);
            return bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö");
        }

        if (!call) {
            return bot.sendMessage(chatId, "‚ùå –ó–≤–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã");
        }

        db.run(`UPDATE calls SET status = 'cancelled' WHERE id = ?`, [callId], function(err) {
            if (err) {
                console.error('Cancel error:', err);
                return bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–≤–æ–Ω–∫–∞");
            }

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            db.all(`SELECT user_id FROM invitations WHERE call_id = ? AND status = 'accepted'`, [callId], (err, users) => {
                users.forEach(user => {
                    bot.sendMessage(user.user_id, `‚ùå –ó–≤–æ–Ω–æ–∫ ID ${callId} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º`).catch(console.error);
                });
            });

            bot.sendMessage(chatId, `‚úÖ –ó–≤–æ–Ω–æ–∫ ID ${callId} –æ—Ç–º–µ–Ω–µ–Ω`);
        });
    });
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
setInterval(() => {
    const now = new Date().toISOString().slice(0, 16);
    db.all(`SELECT * FROM calls WHERE scheduled_time LIKE ? AND status = 'scheduled'`, [`${now}%`], (err, rows) => {
        if (err) return console.error('Notification error:', err);

        rows.forEach(call => {
            const joinLink = `${SERVER_URL}/call.html?call_id=${call.id}&token=${call.join_token}`;
            const message = `üéâ *–í—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞!*\n\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å: ${joinLink}`;

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—é
            bot.sendMessage(call.creator_id, message, { parse_mode: 'Markdown' }).catch(console.error);

            db.run(`UPDATE calls SET status = 'active' WHERE id = ?`, [call.id]);
        });
    });
}, 60000);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
setInterval(() => {
    const now = new Date().toISOString();

    db.all(`SELECT * FROM notifications WHERE scheduled_time <= ? AND sent = FALSE`, [now], (err, notifications) => {
        if (err) return console.error('Notification check error:', err);

        notifications.forEach(notification => {
            sendNotification(notification.user_id, notification.call_id, notification.type);
        });
    });
}, 60000);

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function sendNotification(userId, callId, type) {
    db.get(`SELECT * FROM calls WHERE id = ?`, [callId], (err, call) => {
        if (err || !call) return;

        let message = '';
        if (type === '5min_reminder') {
            const joinLink = `${SERVER_URL}/call.html?call_id=${callId}&token=${call.join_token}`;
            message = `‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:* –ß–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–≤–æ–Ω–æ–∫!\n\nüîó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è: ${joinLink}`;
        }

        if (message) {
            bot.sendMessage(userId, message, { parse_mode: 'Markdown' })
                .then(() => {
                    db.run(`UPDATE notifications SET sent = TRUE WHERE user_id = ? AND call_id = ? AND type = ?`,
                        [userId, callId, type]);
                })
                .catch(console.error);
        }
    });
}

console.log('‚úÖ Bot started successfully');