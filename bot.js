require('dotenv').config();

const TelegramBot = require('node-telegram-bot-api');
const { Sequelize, DataTypes } = require('sequelize');
const express = require('express');
const path = require('path');

// ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====
const TOKEN = process.env.BOT_TOKEN;
const WEB_APP_URL = process.env.WEB_APP_URL || 'https://your-mini-app.com';
const PORT = process.env.PORT || 3000;
const RENDER_URL = process.env.RENDER_EXTERNAL_URL || `https://your-render-app.onrender.com`;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if (!TOKEN) {
    console.error('‚ùå ERROR: BOT_TOKEN is required!');
    process.exit(1);
}

console.log('=== BOT CONFIGURATION ===');
console.log('BOT_TOKEN:', TOKEN ? '‚úÖ Set' : '‚ùå Not set');
console.log('WEB_APP_URL:', WEB_APP_URL);
console.log('RENDER_URL:', RENDER_URL);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PostgreSQL —á–µ—Ä–µ–∑ Sequelize
const sequelize = new Sequelize(process.env.DATABASE_URL, {
    dialect: 'postgres',
    protocol: 'postgres',
    dialectOptions: {
        ssl: {
            require: true,
            rejectUnauthorized: false
        }
    },
    logging: false
});

// –ú–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const User = sequelize.define('User', {
    user_id: { type: DataTypes.INTEGER, primaryKey: true },
    username: DataTypes.STRING,
    first_name: DataTypes.STRING,
    last_name: DataTypes.STRING
}, { timestamps: true });

const Call = sequelize.define('Call', {
    call_code: { type: DataTypes.STRING, unique: true },
    creator_id: DataTypes.INTEGER,
    creator_username: DataTypes.STRING,
    call_name: { type: DataTypes.STRING, defaultValue: '' },
    status: { type: DataTypes.STRING, defaultValue: 'active' },
    ended_at: DataTypes.DATE
}, { timestamps: true });

const CallParticipant = sequelize.define('CallParticipant', {
    user_id: DataTypes.INTEGER,
    username: DataTypes.STRING,
    left_at: DataTypes.DATE
}, { timestamps: true });

// –°–≤—è–∑–∏ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏
Call.hasMany(CallParticipant, { foreignKey: 'call_id' });
CallParticipant.belongsTo(Call, { foreignKey: 'call_id' });

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Express –¥–ª—è Webhooks
const app = express();
app.use(express.json());

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å Webhooks
const bot = new TelegramBot(TOKEN, { webHook: true });
bot.setWebHook(`${RENDER_URL}/bot${TOKEN}`);

// Webhook endpoint
app.post(`/bot${TOKEN}`, (req, res) => {
    bot.processUpdate(req.body);
    res.sendStatus(200);
});

// Health check endpoint
app.get('/health', (req, res) => {
    res.status(200).json({ status: 'OK', service: 'telegram-bot' });
});

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function initializeDatabase() {
    try {
        await sequelize.authenticate();
        console.log('‚úÖ PostgreSQL connected successfully');

        await sequelize.sync({ force: false });
        console.log('‚úÖ Database tables synchronized');
    } catch (error) {
        console.error('‚ùå Database initialization error:', error);
        process.exit(1);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
async function saveUser(user) {
    try {
        await User.upsert({
            user_id: user.id,
            username: user.username,
            first_name: user.first_name,
            last_name: user.last_name
        });
    } catch (error) {
        console.error('‚ùå Save user error:', error);
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 6-—Å–∏–º–≤–æ–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
const generateCallCode = () => {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    let code = '';
    for (let i = 0; i < 6; i++) {
        code += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return code;
};

// ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î =====

// /start command
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    saveUser(msg.from);

    const keyboard = {
        inline_keyboard: [
            [{ text: "üìû –°–æ–∑–¥–∞—Ç—å –∑–≤–æ–Ω–æ–∫", callback_data: 'new_call' }],
            [{ text: "üîó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∑–≤–æ–Ω–∫—É", callback_data: 'join_call' }],
            [{ text: "üìã –ú–æ–∏ –∑–≤–æ–Ω–∫–∏", callback_data: 'my_calls' }]
        ]
    };

    const text = `üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–æ–≤ –≤ Telegram Mini App.`;

    bot.sendMessage(chatId, text, { reply_markup: keyboard });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;
    const user = callbackQuery.from;

    try {
        if (data === 'new_call') {
            await handleNewCall(chatId, user);
        } else if (data === 'join_call') {
            await handleJoinCall(chatId);
        } else if (data === 'my_calls') {
            await handleMyCalls(chatId, user);
        }
    } catch (error) {
        console.error('Callback error:', error);
        bot.sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    }

    bot.answerCallbackQuery(callbackQuery.id);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–≤–æ–Ω–∫–∞
async function handleNewCall(chatId, user) {
    const callCode = generateCallCode();

    try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–≤–æ–Ω–æ–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        const call = await Call.create({
            call_code: callCode,
            creator_id: user.id,
            creator_username: user.username || user.first_name
        });

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        await CallParticipant.create({
            call_id: call.id,
            user_id: user.id,
            username: user.username || user.first_name
        });

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∑–≤–æ–Ω–∫—É
        const callLink = `${WEB_APP_URL}?call_code=${callCode}&user_id=${user.id}`;

        const message = `‚úÖ –ó–≤–æ–Ω–æ–∫ —Å–æ–∑–¥–∞–Ω!\n\n–ö–æ–¥ –∑–≤–æ–Ω–∫–∞: <code>${callCode}</code>\n\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è: ${callLink}`;

        bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
    } catch (error) {
        console.error('Create call error:', error);
        bot.sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–≤–æ–Ω–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∑–≤–æ–Ω–∫—É
async function handleJoinCall(chatId) {
    bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∑–≤–æ–Ω–∫–∞:", {
        reply_markup: {
            force_reply: true,
            selective: true
        }
    }).then(sentMsg => {
        // –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç —Å –∫–æ–¥–æ–º –∑–≤–æ–Ω–∫–∞
        bot.onReplyToMessage(chatId, sentMsg.message_id, async (msg) => {
            const callCode = msg.text.trim().toUpperCase();

            try {
                // –ò—â–µ–º –∑–≤–æ–Ω–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                const call = await Call.findOne({ where: { call_code: callCode, status: 'active' } });

                if (!call) {
                    bot.sendMessage(chatId, "‚ùå –ó–≤–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω.");
                    return;
                }

                // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                const callLink = `${WEB_APP_URL}?call_code=${callCode}&user_id=${msg.from.id}`;
                bot.sendMessage(chatId, `‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∑–≤–æ–Ω–∫—É: ${callLink}`);
            } catch (error) {
                console.error('Join call error:', error);
                bot.sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            }
        });
    });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–∏—Ö –∑–≤–æ–Ω–∫–∏
async function handleMyCalls(chatId, user) {
    try {
        // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–≤–æ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const calls = await Call.findAll({
            where: { creator_id: user.id, status: 'active' },
            include: [{
                model: CallParticipant,
                where: { user_id: user.id },
                required: false
            }],
            order: [['createdAt', 'DESC']],
            limit: 5
        });

        if (calls.length === 0) {
            bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤.");
            return;
        }

        let message = "üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–≤–æ–Ω–∫–∏:\n\n";
        calls.forEach(call => {
            const callLink = `${WEB_APP_URL}?call_code=${call.call_code}&user_id=${user.id}`;
            message += `üîπ ${call.call_name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'} (–ö–æ–¥: <code>${call.call_code}</code>)\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è: ${callLink}\n\n`;
        });

        bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
    } catch (error) {
        console.error('My calls error:', error);
        bot.sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–≤–æ–Ω–∫–æ–≤.");
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
    if (msg.text && msg.text.startsWith('/')) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã

    saveUser(msg.from);
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
    try {
        await initializeDatabase();

        app.listen(PORT, '0.0.0.0', () => {
            console.log(`üöÄ Bot server running on port ${PORT}`);
            console.log(`üåê Webhook URL: ${RENDER_URL}/bot${TOKEN}`);
        });
    } catch (error) {
        console.error('‚ùå Failed to start server:', error);
        process.exit(1);
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
bot.on('error', (error) => console.error('‚ùå Bot error:', error));
bot.on('polling_error', (error) => console.error('‚ùå Polling error:', error));

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
startServer();

console.log('‚úÖ Bot configured for Webhooks');