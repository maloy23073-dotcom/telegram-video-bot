const TelegramBot = require('node-telegram-bot-api');
const sqlite3 = require('sqlite3').verbose();
const path = require('path');

// ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====
const TOKEN = process.env.BOT_TOKEN;
const SERVER_URL = process.env.SERVER_URL || 'https://telegram-video-bot-vvfl.onrender.com';

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.log('=== BOT STARTING ===');
console.log('BOT_TOKEN:', TOKEN ? '‚úÖ Set' : '‚ùå Not set');
console.log('SERVER_URL:', SERVER_URL);

if (!TOKEN) {
    console.error('‚ùå ERROR: BOT_TOKEN is required!');
    process.exit(1);
}

const bot = new TelegramBot(TOKEN, {
    polling: true,
    request: {
        timeout: 30000
    }
});

const db = new sqlite3.Database(path.join(__dirname, 'calls.db'));

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
bot.on('error', (error) => console.error('‚ùå Bot error:', error));
bot.on('polling_error', (error) => console.error('‚ùå Polling error:', error));

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
bot.getMe()
    .then((me) => console.log(`‚úÖ Bot @${me.username} started`))
    .catch((error) => {
        console.error('‚ùå Bot auth failed:', error);
        process.exit(1);
    });

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
db.serialize(() => {
    db.run(`CREATE TABLE IF NOT EXISTS calls (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        creator_id INTEGER NOT NULL,
        scheduled_time TEXT NOT NULL,
        duration_minutes INTEGER NOT NULL,
        status TEXT DEFAULT 'scheduled',
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )`, (err) => {
        if (err) console.error('‚ùå Database error:', err);
        else console.log('‚úÖ Database ready');
    });
});

// ===== –ö–û–ú–ê–ù–î–ê /start =====
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    const text = `
üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–æ–≤ –≤ Telegram.

üìã –ö–æ–º–∞–Ω–¥—ã:
/newcall - –°–æ–∑–¥–∞—Ç—å –∑–≤–æ–Ω–æ–∫
/mycalls - –ú–æ–∏ –∑–≤–æ–Ω–∫–∏
/cancelcall - –û—Ç–º–µ–Ω–∏—Ç—å –∑–≤–æ–Ω–æ–∫
/help - –ü–æ–º–æ—â—å
    `;
    bot.sendMessage(chatId, text).catch(console.error);
});

// ===== –ö–û–ú–ê–ù–î–ê /help =====
bot.onText(/\/help/, (msg) => {
    const chatId = msg.chat.id;
    const text = `
üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

üìû /newcall - –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫
üìã /mycalls - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –∑–≤–æ–Ω–∫–∏
‚ùå /cancelcall [ID] - –û—Ç–º–µ–Ω–∏—Ç—å –∑–≤–æ–Ω–æ–∫

üí° –ü—Ä–∏–º–µ—Ä: /cancelcall 5
    `;
    bot.sendMessage(chatId, text).catch(console.error);
});

// ===== –ö–û–ú–ê–ù–î–ê /newcall =====
bot.onText(/\/newcall/, async (msg) => {
    const chatId = msg.chat.id;

    try {
        // –®–∞–≥ 1: –ó–∞–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏
        await bot.sendMessage(chatId, "üïê –ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è? (–§–æ—Ä–º–∞—Ç: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú)\n–ü—Ä–∏–º–µ—Ä: 2024-12-25 15:30");

        const timeMsg = await new Promise((resolve, reject) => {
            const handler = (msg) => {
                if (msg.chat.id === chatId) {
                    bot.removeListener('message', handler);
                    resolve(msg);
                }
            };
            bot.on('message', handler);
            setTimeout(() => reject(new Error('Timeout')), 60000);
        });

        // –®–∞–≥ 2: –ó–∞–ø—Ä–æ—Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        await bot.sendMessage(chatId, "‚è± –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö?\n–ü—Ä–∏–º–µ—Ä: 30");

        const durationMsg = await new Promise((resolve, reject) => {
            const handler = (msg) => {
                if (msg.chat.id === chatId) {
                    bot.removeListener('message', handler);
                    resolve(msg);
                }
            };
            bot.on('message', handler);
            setTimeout(() => reject(new Error('Timeout')), 60000);
        });

        const duration = parseInt(durationMsg.text);
        if (isNaN(duration) || duration < 1) {
            return bot.sendMessage(chatId, "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0");
        }

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        await new Promise((resolve, reject) => {
            db.run(
                `INSERT INTO calls (creator_id, scheduled_time, duration_minutes) VALUES (?, ?, ?)`,
                [chatId, timeMsg.text, duration],
                function(err) {
                    if (err) return reject(err);
                    resolve(this.lastID);
                }
            );
        }).then(async (callId) => {
            const joinLink = `${SERVER_URL}/call.html?call_id=${callId}`;
            const message = `
‚úÖ –ó–≤–æ–Ω–æ–∫ —Å–æ–∑–¥–∞–Ω!

üìÖ ${timeMsg.text}
‚è± ${duration} –º–∏–Ω—É—Ç
üîó ${joinLink}
üéØ ID: ${callId}
            `;
            await bot.sendMessage(chatId, message);
        });

    } catch (error) {
        console.error('Newcall error:', error);
        bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /newcall —Å–Ω–æ–≤–∞");
    }
});

// ===== –ö–û–ú–ê–ù–î–ê /mycalls =====
bot.onText(/\/mycalls/, (msg) => {
    const chatId = msg.chat.id;

    db.all(`SELECT * FROM calls WHERE creator_id = ? ORDER BY created_at DESC`, [chatId], (err, rows) => {
        if (err) {
            console.error('Mycalls error:', err);
            return bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö");
        }

        if (rows.length === 0) {
            return bot.sendMessage(chatId, "üì≠ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤");
        }

        let message = "üìÖ –í–∞—à–∏ –∑–≤–æ–Ω–∫–∏:\n\n";
        rows.forEach((call, index) => {
            message += `${index + 1}. ${call.scheduled_time} (${call.duration_minutes} –º–∏–Ω)\n`;
            message += `   Status: ${call.status} | ID: ${call.id}\n\n`;
        });

        bot.sendMessage(chatId, message).catch(console.error);
    });
});

// ===== –ö–û–ú–ê–ù–î–ê /cancelcall =====
bot.onText(/\/cancelcall(?: (\d+))?/, (msg, match) => {
    const chatId = msg.chat.id;
    const callId = match[1];

    if (!callId) {
        return bot.sendMessage(chatId, "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–≤–æ–Ω–∫–∞\n–ü—Ä–∏–º–µ—Ä: /cancelcall 5");
    }

    db.run(`DELETE FROM calls WHERE id = ? AND creator_id = ?`, [callId, chatId], function(err) {
        if (err) {
            console.error('Cancelcall error:', err);
            return bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã");
        }

        if (this.changes === 0) {
            return bot.sendMessage(chatId, "‚ùå –ó–≤–æ–Ω–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }

        bot.sendMessage(chatId, "‚úÖ –ó–≤–æ–Ω–æ–∫ –æ—Ç–º–µ–Ω–µ–Ω").catch(console.error);
    });
});

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
setInterval(() => {
    const now = new Date().toISOString().slice(0, 16);
    db.all(`SELECT * FROM calls WHERE scheduled_time LIKE ? AND status = 'scheduled'`, [`${now}%`], (err, rows) => {
        if (err) return console.error('Notification error:', err);

        rows.forEach(call => {
            const joinLink = `${SERVER_URL}/call.html?call_id=${call.id}`;
            const message = `üéâ –í—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞!\n\n${joinLink}`;

            bot.sendMessage(call.creator_id, message).catch(console.error);
            db.run(`UPDATE calls SET status = 'active' WHERE id = ?`, [call.id]);
        });
    });
}, 60000);

console.log('‚úÖ Bot started successfully');