const TelegramBot = require('node-telegram-bot-api');
const sqlite3 = require('sqlite3').verbose();
const path = require('path');

// ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====
const TOKEN = process.env.BOT_TOKEN || '8474432468:AAE7xQulaUCRxrCS4iKHxMT3EXXXSHa_ZyQ';
const SERVER_URL = process.env.SERVER_URL || 'https://telegram-video-bot-vvfl.onrender.com';

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.log('ü§ñ Bot script started!');
console.log('=== ENV VARIABLES ===');
console.log('BOT_TOKEN:', process.env.BOT_TOKEN ? '‚úÖ Set' : '‚ùå Not set');
console.log('SERVER_URL:', process.env.SERVER_URL || 'Using default');
console.log('=====================');

if (!TOKEN) {
    console.error('‚ùå ERROR: BOT_TOKEN is required!');
    process.exit(1);
}

const bot = new TelegramBot(TOKEN, { polling: true });
const db = new sqlite3.Database(path.join(__dirname, 'calls.db'));

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
bot.on('error', (error) => console.error('‚ùå Bot error:', error));
bot.on('polling_error', (error) => console.error('‚ùå Polling error:', error));

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É
bot.getMe().then((me) => {
    console.log(`‚úÖ Bot @${me.username} started successfully`);
}).catch((error) => {
    console.error('‚ùå Bot authentication failed:', error);
    process.exit(1);
});

// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–≤–æ–Ω–∫–æ–≤
db.serialize(() => {
    db.run(`
        CREATE TABLE IF NOT EXISTS calls (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            creator_id INTEGER NOT NULL,
            participant_id INTEGER,
            scheduled_time TEXT NOT NULL,
            duration_minutes INTEGER NOT NULL,
            status TEXT DEFAULT 'scheduled',
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    `, (err) => {
        if (err) console.error('‚ùå Database error:', err);
        else console.log('‚úÖ Database initialized');
    });
});

// ===== –ö–û–ú–ê–ù–î–ê /start =====
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    const welcomeText = `
üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–æ–≤ –ø—Ä—è–º–æ –≤ Telegram.

*üìã –ö–æ–º–∞–Ω–¥—ã:*
/newcall - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫
/mycalls - –ú–æ–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∏
/cancelcall - –û—Ç–º–µ–Ω–∏—Ç—å –∑–≤–æ–Ω–æ–∫
/help - –ü–æ–º–æ—â—å

–°–æ–∑–¥–∞–π –∑–≤–æ–Ω–æ–∫, —É–∫–∞–∂–∏ –≤—Ä–µ–º—è –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –∞ —è –ø—Ä–∏—à–ª—é —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!
    `;

    bot.sendMessage(chatId, welcomeText, { parse_mode: 'Markdown' })
        .catch(error => console.error('Send message error:', error));
});

// ===== –ö–û–ú–ê–ù–î–ê /help =====
bot.onText(/\/help/, (msg) => {
    const chatId = msg.chat.id;
    const helpText = `
*üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

*üìÖ –°–æ–∑–¥–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–∞:*
/newcall - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫
‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ

*üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞–º–∏:*
/mycalls - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–∞—à–∏ –∑–≤–æ–Ω–∫–∏
/cancelcall [ID] - –û—Ç–º–µ–Ω–∏—Ç—å –∑–≤–æ–Ω–æ–∫
‚Ä¢ –ü—Ä–∏–º–µ—Ä: /cancelcall 5

*‚ùì –ü–æ–º–æ—â—å:*
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

*üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞:* –î–ª—è –æ—Ç–º–µ–Ω—ã –∑–≤–æ–Ω–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ID –∏–∑ –∫–æ–º–∞–Ω–¥—ã /mycalls
    `;

    bot.sendMessage(chatId, helpText, { parse_mode: 'Markdown' })
        .catch(error => console.error('Send message error:', error));
});

// ===== –ö–û–ú–ê–ù–î–ê /newcall =====
bot.onText(/\/newcall/, (msg) => {
    const chatId = msg.chat.id;
    console.log(`User ${chatId} started new call creation`);

    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userState = {
        step: 'asking_time',
        time: null,
        duration: null
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const responseHandler = (responseMsg) => {
        if (responseMsg.chat.id !== chatId) return;

        if (userState.step === 'asking_time') {
            userState.time = responseMsg.text;
            userState.step = 'asking_duration';

            console.log(`User ${chatId} set time: ${userState.time}`);

            bot.sendMessage(chatId, "‚è± *–ö–∞–∫–æ–≤–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–≤–æ–Ω–∫–∞?* (–≤ –º–∏–Ω—É—Ç–∞—Ö)\n–ù–∞–ø—Ä–∏–º–µ—Ä: 30", {
                parse_mode: 'Markdown',
                reply_markup: { force_reply: true }
            }).then(() => {
                // –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ—Ç–≤–µ—Ç
                bot.once('message', responseHandler);
            }).catch(error => {
                console.error('Error asking duration:', error);
            });

        } else if (userState.step === 'asking_duration') {
            const duration = parseInt(responseMsg.text);

            if (isNaN(duration) || duration <= 0) {
                bot.sendMessage(chatId, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–±–æ–ª—å—à–µ 0)\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 30", {
                    parse_mode: 'Markdown',
                    reply_markup: { force_reply: true }
                }).then(() => {
                    // –ü–æ–≤—Ç–æ—Ä–Ω–æ –∂–¥–µ–º –æ—Ç–≤–µ—Ç —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
                    bot.once('message', responseHandler);
                });
                return;
            }

            userState.duration = duration;
            console.log(`User ${chatId} set duration: ${userState.duration} minutes`);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–≤–æ–Ω–æ–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            db.run(
                `INSERT INTO calls (creator_id, scheduled_time, duration_minutes) VALUES (?, ?, ?)`,
                [chatId, userState.time, userState.duration],
                function(err) {
                    if (err) {
                        console.error('Database insert error:', err);
                        bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞");
                        return;
                    }

                    const callId = this.lastID;
                    const joinLink = `${SERVER_URL}/call.html?call_id=${callId}`;

                    const message = `
‚úÖ *–ó–≤–æ–Ω–æ–∫ —Å–æ–∑–¥–∞–Ω!*

üìÖ –í—Ä–µ–º—è: ${userState.time}
‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${userState.duration} –º–∏–Ω—É—Ç
üîó –°—Å—ã–ª–∫–∞: ${joinLink}
üéØ ID –∑–≤–æ–Ω–∫–∞: ${callId}

*–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –≤–∞—à–µ–º—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É!*
–î–ª—è –æ—Ç–º–µ–Ω—ã: /cancelcall ${callId}
                    `;

                    bot.sendMessage(chatId, message, { parse_mode: 'Markdown' })
                        .then(() => {
                            console.log(`Call created successfully for user ${chatId}, ID: ${callId}`);
                        })
                        .catch(error => {
                            console.error('Send message error:', error);
                        });
                }
            );
        }
    };

    // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å - —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è
    bot.sendMessage(chatId, "üïê *–ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –ø–ª–∞–Ω–∏—Ä—É–µ–º –∑–≤–æ–Ω–æ–∫?*\n–í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú\n–ù–∞–ø—Ä–∏–º–µ—Ä: 2024-12-25 15:30", {
        parse_mode: 'Markdown',
        reply_markup: { force_reply: true }
    }).then(() => {
        // –ñ–¥–µ–º –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç (–≤—Ä–µ–º—è)
        bot.once('message', responseHandler);
    }).catch(error => {
        console.error('Error asking time:', error);
        bot.sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞");
    });
});

// ===== –ö–û–ú–ê–ù–î–ê /mycalls =====
bot.onText(/\/mycalls/, (msg) => {
    const chatId = msg.chat.id;

    console.log(`User ${chatId} requested their calls`);

    db.all(
        `SELECT id, scheduled_time, duration_minutes, status, created_at 
         FROM calls WHERE creator_id = ? 
         ORDER BY scheduled_time DESC`,
        [chatId],
        (err, rows) => {
            if (err) {
                console.error('‚ùå Database error in /mycalls:', err);
                return bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–∏—Ö –∑–≤–æ–Ω–∫–æ–≤");
            }

            if (!rows || rows.length === 0) {
                return bot.sendMessage(chatId,
                    "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤\n\n" +
                    "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∑–≤–æ–Ω–æ–∫ –∫–æ–º–∞–Ω–¥–æ–π /newcall"
                );
            }

            let message = "üéØ *–í–∞—à–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∏:*\n\n";

            rows.forEach((call, index) => {
                const statusIcon = call.status === 'scheduled' ? '‚è∞' : '‚úÖ';
                const statusText = call.status === 'scheduled' ? '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω' : '–ó–∞–≤–µ—Ä—à–µ–Ω';

                message += `${index + 1}. ${statusIcon} *${call.scheduled_time}*\n`;
                message += `   ‚è± ${call.duration_minutes} –º–∏–Ω. | üìä ${statusText}\n`;
                message += `   üÜî ID: ${call.id} | üìÖ ${call.created_at.split(' ')[0]}\n\n`;
            });

            message += "\n*‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã:* /cancelcall [ID]\n";
            message += "*üìÖ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π:* /newcall\n";
            message += "*‚ùì –ü–æ–º–æ—â—å:* /help";

            bot.sendMessage(chatId, message, {
                parse_mode: 'Markdown',
                disable_web_page_preview: true
            }).catch(error => {
                console.error('Error sending mycalls message:', error);
            });
        }
    );
});

// ===== –ö–û–ú–ê–ù–î–ê /cancelcall =====
bot.onText(/\/cancelcall(?:\s+(\d+))?/, (msg, match) => {
    const chatId = msg.chat.id;
    const callId = match[1];

    if (!callId) {
        return bot.sendMessage(chatId,
            "‚ùå *–£–∫–∞–∂–∏—Ç–µ ID –∑–≤–æ–Ω–∫–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã*\n\n" +
            "–ü—Ä–∏–º–µ—Ä: /cancelcall 5\n\n" +
            "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å ID –≤–∞—à–∏—Ö –∑–≤–æ–Ω–∫–æ–≤: /mycalls",
            { parse_mode: 'Markdown' }
        );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–∞ –∏ –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.get(
        `SELECT id, scheduled_time FROM calls WHERE id = ? AND creator_id = ?`,
        [callId, chatId],
        (err, call) => {
            if (err) {
                console.error('Database error in /cancelcall:', err);
                return bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–≤–æ–Ω–∫–∞");
            }

            if (!call) {
                return bot.sendMessage(chatId,
                    "‚ùå *–ó–≤–æ–Ω–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!*\n\n" +
                    "–í–æ–∑–º–æ–∂–Ω–æ:\n" +
                    "‚Ä¢ ID —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ\n" +
                    "‚Ä¢ –≠—Ç–æ –Ω–µ –≤–∞—à –∑–≤–æ–Ω–∫\n" +
                    "‚Ä¢ –ó–≤–æ–Ω–∫ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω\n\n" +
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –∑–≤–æ–Ω–∫–∏: /mycalls",
                    { parse_mode: 'Markdown' }
                );
            }

            // –£–¥–∞–ª—è–µ–º –∑–≤–æ–Ω–æ–∫
            db.run(
                `DELETE FROM calls WHERE id = ? AND creator_id = ?`,
                [callId, chatId],
                function(err) {
                    if (err) {
                        console.error('Database delete error:', err);
                        return bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–≤–æ–Ω–∫–∞");
                    }

                    if (this.changes === 0) {
                        return bot.sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–≤–æ–Ω–∫");
                    }

                    const successMessage = `
‚úÖ *–ó–≤–æ–Ω–æ–∫ –æ—Ç–º–µ–Ω–µ–Ω!*

üìÖ –ë—ã–ª–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: ${call.scheduled_time}
üÜî ID: ${callId}

*‚ùå –ó–≤–æ–Ω–æ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω*
                    `;

                    bot.sendMessage(chatId, successMessage, { parse_mode: 'Markdown' })
                        .catch(error => console.error('Send message error:', error));
                }
            );
        }
    );
});

// ===== –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ó–í–û–ù–ö–û–í =====
setInterval(() => {
    const now = new Date().toISOString().slice(0, 16).replace('T', ' ');

    db.all(
        `SELECT * FROM calls WHERE scheduled_time LIKE ? AND status = 'scheduled'`,
        [`${now}%`],
        (err, rows) => {
            if (err) {
                console.error('Database select error:', err);
                return;
            }

            rows.forEach(call => {
                const joinLink = `${SERVER_URL}/call.html?call_id=${call.id}`;
                const message = `üéâ *–í—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞!*\n\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –ø–æ —Å—Å—ã–ª–∫–µ: ${joinLink}`;

                bot.sendMessage(call.creator_id, message, {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: [[
                            {
                                text: "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∑–≤–æ–Ω–∫—É",
                                web_app: { url: joinLink }
                            }
                        ]]
                    }
                }).catch(error => {
                    console.error('Send notification error:', error);
                });

                db.run(`UPDATE calls SET status = 'active' WHERE id = ?`, [call.id], (err) => {
                    if (err) console.error('Database update error:', err);
                });
            });
        }
    );
}, 60000);

console.log('üîÑ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');