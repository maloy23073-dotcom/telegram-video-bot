require('dotenv').config();

const TelegramBot = require('node-telegram-bot-api');
const sqlite3 = require('sqlite3').verbose();
const path = require('path');

// ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====
const TOKEN = process.env.BOT_TOKEN;
const WEB_APP_URL = process.env.WEB_APP_URL || 'https://telegram-video-bot-vvfl.onrender.com';

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 6-—Å–∏–º–≤–æ–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
const generateCallCode = () => {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    let code = '';
    for (let i = 0; i < 6; i++) {
        code += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return code;
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.log('=== BOT STARTING ===');
console.log('BOT_TOKEN:', TOKEN ? '‚úÖ Set' : '‚ùå Not set');
console.log('WEB_APP_URL:', WEB_APP_URL);

if (!TOKEN) {
    console.error('‚ùå ERROR: BOT_TOKEN is required!');
    process.exit(1);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
const dbPath = path.join(__dirname, 'database.sqlite');
const db = new sqlite3.Database(dbPath, (err) => {
    if (err) console.error('‚ùå Database error:', err);
    else console.log('‚úÖ Database connected');
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(TOKEN, {
    polling: true,
    request: {
        timeout: 30000
    }
});

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
function initializeDatabase() {
    // –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    db.run(`CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )`, (err) => {
        if (err) console.error('‚ùå Users table error:', err);
        else console.log('‚úÖ Users table ready');
    });

    // –¢–∞–±–ª–∏—Ü–∞ –∑–≤–æ–Ω–∫–æ–≤ (–ü–ï–†–ï–î–ï–õ–ê–ù–ê –ø–æ–¥ 6-—Å–∏–º–≤–æ–ª—å–Ω—ã–µ –∫–æ–¥—ã)
    db.run(`CREATE TABLE IF NOT EXISTS calls (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        call_code TEXT UNIQUE NOT NULL,
        creator_id INTEGER NOT NULL,
        creator_username TEXT,
        call_name TEXT DEFAULT '',
        status TEXT DEFAULT 'active',
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        ended_at DATETIME
    )`, (err) => {
        if (err) console.error('‚ùå Calls table error:', err);
        else console.log('‚úÖ Calls table ready');
    });

    // –¢–∞–±–ª–∏—Ü–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–≤–æ–Ω–∫–æ–≤
    db.run(`CREATE TABLE IF NOT EXISTS call_participants (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        call_id INTEGER NOT NULL,
        user_id INTEGER NOT NULL,
        username TEXT,
        joined_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        left_at DATETIME,
        FOREIGN KEY (call_id) REFERENCES calls (id)
    )`, (err) => {
        if (err) console.error('‚ùå Call participants table error:', err);
        else console.log('‚úÖ Call participants table ready');
    });
}

// –í—ã–∑–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î
initializeDatabase();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
function saveUser(user) {
    db.run(
        `INSERT OR REPLACE INTO users (user_id, username, first_name, last_name) 
         VALUES (?, ?, ?, ?)`,
        [user.id, user.username, user.first_name, user.last_name],
        (err) => {
            if (err) console.error('‚ùå Save user error:', err);
        }
    );
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø—Ä–∏ –ª—é–±–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
bot.on('message', (msg) => {
    if (msg.from) {
        saveUser(msg.from);
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
bot.on('error', (error) => console.error('‚ùå Bot error:', error));
bot.on('polling_error', (error) => console.error('‚ùå Polling error:', error));

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
bot.getMe()
    .then((me) => {
        console.log(`‚úÖ Bot @${me.username} started`);
        bot.options.username = me.username;
    })
    .catch((error) => {
        console.error('‚ùå Bot auth failed:', error);
        process.exit(1);
    });

// ===== –ö–û–ú–ê–ù–î–ê /start =====
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;

    const keyboard = {
        inline_keyboard: [
            [{ text: "üìû –°–æ–∑–¥–∞—Ç—å –∑–≤–æ–Ω–æ–∫", callback_data: 'new_call' }],
            [{ text: "üîó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∑–≤–æ–Ω–∫—É", callback_data: 'join_call' }],
            [{ text: "üìã –ú–æ–∏ –∑–≤–æ–Ω–∫–∏", callback_data: 'my_calls' }]
        ]
    };

    const text = `
üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–æ–≤ –≤ Telegram Mini App.

üöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∏ –ø—Ä—è–º–æ –≤ Telegram
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ 6-—Å–∏–º–≤–æ–ª—å–Ω–æ–º—É –∫–æ–¥—É
‚Ä¢ –û–±—â–∞–π—Ç–µ—Å—å –ª–∏—Ü–æ–º –∫ –ª–∏—Ü—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    `;

    bot.sendMessage(chatId, text, {
        reply_markup: keyboard,
        parse_mode: 'Markdown'
    }).catch(console.error);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;

    try {
        if (data === 'new_call') {
            await handleNewCall(chatId, callbackQuery.from);
        } else if (data === 'join_call') {
            await handleJoinCall(chatId);
        } else if (data === 'my_calls') {
            await handleMyCalls(chatId);
        }
    } catch (error) {
        console.error('Callback error:', error);
        bot.sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    }

    bot.answerCallbackQuery(callbackQuery.id);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–≤–æ–Ω–∫–∞
async function handleNewCall(chatId, user) {
    try {
        await bot.sendMessage(chatId, "üìù –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –∑–≤–æ–Ω–∫–∞:");

        const nameMsg = await new Promise((resolve, reject) => {
            const handler = (msg) => {
                if (msg.chat.id === chatId) {
                    bot.removeListener('message', handler);
                    resolve(msg);
                }
            };
            bot.on('message', handler);
            setTimeout(() => reject(new Error('Timeout')), 30000);
        });

        const callName = nameMsg.text;
        const callCode = generateCallCode();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–≤–æ–Ω–æ–∫ –≤ –ë–î
        db.run(
            `INSERT INTO calls (call_code, creator_id, creator_username, call_name) VALUES (?, ?, ?, ?)`,
            [callCode, chatId, user.username, callName],
            function(err) {
                if (err) {
                    console.error('New call error:', err);
                    return bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–≤–æ–Ω–∫–∞");
                }

                const webAppUrl = `${WEB_APP_URL}?call_code=${callCode}&user_id=${chatId}&creator=true`;

                const keyboard = {
                    inline_keyboard: [[
                        {
                            text: "üé• –ù–∞—á–∞—Ç—å –∑–≤–æ–Ω–æ–∫",
                            web_app: { url: webAppUrl }
                        }
                    ]]
                };

                const message = `
‚úÖ *–ó–≤–æ–Ω–æ–∫ —Å–æ–∑–¥–∞–Ω!*

üìû –ù–∞–∑–≤–∞–Ω–∏–µ: ${callName}
üî¢ –ö–æ–¥: \`${callCode}\`
üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: @${user.username}

–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º –∫–æ–¥–æ–º —Å –¥—Ä—É–∑—å—è–º–∏ —á—Ç–æ–±—ã –æ–Ω–∏ –º–æ–≥–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è!

*–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:*
\`/join ${callCode}\`
                `;

                bot.sendMessage(chatId, message, {
                    reply_markup: keyboard,
                    parse_mode: 'Markdown'
                });
            }
        );

    } catch (error) {
        console.error('New call error:', error);
        bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞");
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∑–≤–æ–Ω–∫—É
async function handleJoinCall(chatId) {
    try {
        await bot.sendMessage(chatId, "üî¢ –í–≤–µ–¥–∏—Ç–µ 6-—Å–∏–º–≤–æ–ª—å–Ω—ã–π –∫–æ–¥ –∑–≤–æ–Ω–∫–∞:");

        const codeMsg = await new Promise((resolve, reject) => {
            const handler = (msg) => {
                if (msg.chat.id === chatId && msg.text && msg.text.length === 6) {
                    bot.removeListener('message', handler);
                    resolve(msg);
                }
            };
            bot.on('message', handler);
            setTimeout(() => reject(new Error('Timeout')), 30000);
        });

        const callCode = codeMsg.text.toUpperCase();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
        db.get(`SELECT * FROM calls WHERE call_code = ? AND status = 'active'`, [callCode], (err, call) => {
            if (err || !call) {
                return bot.sendMessage(chatId, "‚ùå –ó–≤–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω");
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏
            db.run(
                `INSERT INTO call_participants (call_id, user_id, username) VALUES (?, ?, ?)`,
                [call.id, chatId, codeMsg.from.username],
                function(err) {
                    if (err) {
                        return bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∑–≤–æ–Ω–∫—É");
                    }

                    const webAppUrl = `${WEB_APP_URL}?call_code=${callCode}&user_id=${chatId}`;

                    const keyboard = {
                        inline_keyboard: [[
                            {
                                text: "üé• –ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–≤–æ–Ω–∫—É",
                                web_app: { url: webAppUrl }
                            }
                        ]]
                    };

                    bot.sendMessage(chatId, `‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∑–≤–æ–Ω–∫—É "${call.call_name}"\n–ö–æ–¥: ${callCode}`, {
                        reply_markup: keyboard
                    });

                    // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è
                    bot.sendMessage(call.creator_id, `üëã @${codeMsg.from.username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≤–∞—à–µ–º—É –∑–≤–æ–Ω–∫—É "${call.call_name}"`);
                }
            );
        });

    } catch (error) {
        console.error('Join call error:', error);
        bot.sendMessage(chatId, "‚ùå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    }
}

// –ü–æ–∫–∞–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function handleMyCalls(chatId) {
    db.all(`
        SELECT c.*, COUNT(cp.id) as participants_count 
        FROM calls c 
        LEFT JOIN call_participants cp ON c.id = cp.call_id 
        WHERE c.creator_id = ? AND c.status = 'active' 
        GROUP BY c.id
    `, [chatId], (err, calls) => {
        if (err) {
            console.error('My calls error:', err);
            return bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–≤–æ–Ω–∫–æ–≤");
        }

        if (calls.length === 0) {
            return bot.sendMessage(chatId, "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤");
        }

        let message = "üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–≤–æ–Ω–∫–∏:\n\n";

        calls.forEach(call => {
            message += `üî∏ *${call.call_name}*\n`;
            message += `üÜî –ö–æ–¥: \`${call.call_code}\`\n`;
            message += `üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${call.participants_count}\n`;
            message += `üïê –°–æ–∑–¥–∞–Ω: ${new Date(call.created_at).toLocaleString('ru-RU')}\n`;
            message += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
        });

        message += "\n–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–¥–æ–º —Å –¥—Ä—É–∑—å—è–º–∏ —á—Ç–æ–±—ã –æ–Ω–∏ –º–æ–≥–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è!";

        bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
    });
}

// ===== –ö–û–ú–ê–ù–î–ê /join =====
bot.onText(/\/join (.+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const callCode = match[1].toUpperCase();

    if (callCode.length !== 6) {
        return bot.sendMessage(chatId, "‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 6 —Å–∏–º–≤–æ–ª–æ–≤");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
    db.get(`SELECT * FROM calls WHERE call_code = ? AND status = 'active'`, [callCode], (err, call) => {
        if (err || !call) {
            return bot.sendMessage(chatId, "‚ùå –ó–≤–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω");
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏
        db.run(
            `INSERT INTO call_participants (call_id, user_id, username) VALUES (?, ?, ?)`,
            [call.id, chatId, msg.from.username],
            function(err) {
                if (err) {
                    return bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∑–≤–æ–Ω–∫—É");
                }

                const webAppUrl = `${WEB_APP_URL}?call_code=${callCode}&user_id=${chatId}`;

                const keyboard = {
                    inline_keyboard: [[
                        {
                            text: "üé• –ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–≤–æ–Ω–∫—É",
                            web_app: { url: webAppUrl }
                        }
                    ]]
                };

                bot.sendMessage(chatId, `‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∑–≤–æ–Ω–∫—É "${call.call_name}"`, {
                    reply_markup: keyboard
                });

                // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è
                bot.sendMessage(call.creator_id, `üëã @${msg.from.username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≤–∞—à–µ–º—É –∑–≤–æ–Ω–∫—É "${call.call_name}"`);
            }
        );
    });
});

// ===== –ö–û–ú–ê–ù–î–ê /endcall =====
bot.onText(/\/endcall(?: (.+))?/, (msg, match) => {
    const chatId = msg.chat.id;
    const callCode = match[1] ? match[1].toUpperCase() : null;

    if (callCode) {
        // –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –ø–æ –∫–æ–¥—É
        db.get(`SELECT * FROM calls WHERE call_code = ? AND creator_id = ?`, [callCode, chatId], (err, call) => {
            if (err || !call) {
                return bot.sendMessage(chatId, "‚ùå –ó–≤–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è");
            }

            endCall(call.id, chatId);
        });
    } else {
        // –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–≤–æ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.all(`SELECT * FROM calls WHERE creator_id = ? AND status = 'active'`, [chatId], (err, calls) => {
            if (err || calls.length === 0) {
                return bot.sendMessage(chatId, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤");
            }

            calls.forEach(call => {
                endCall(call.id, chatId);
            });

            bot.sendMessage(chatId, `‚úÖ –í—Å–µ –≤–∞—à–∏ –∑–≤–æ–Ω–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã`);
        });
    }
});

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞
function endCall(callId, creatorId) {
    db.run(
        `UPDATE calls SET status = 'ended', ended_at = CURRENT_TIMESTAMP WHERE id = ?`,
        [callId],
        function(err) {
            if (err) {
                console.error('End call error:', err);
                return;
            }

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            db.all(`SELECT user_id FROM call_participants WHERE call_id = ?`, [callId], (err, participants) => {
                participants.forEach(participant => {
                    if (participant.user_id !== creatorId) {
                        bot.sendMessage(participant.user_id, "üìû –ó–≤–æ–Ω–æ–∫ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º").catch(console.error);
                    }
                });
            });

            bot.sendMessage(creatorId, "‚úÖ –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω");
        }
    );
}

// ===== –ö–û–ú–ê–ù–î–ê /help =====
bot.onText(/\/help/, (msg) => {
    const chatId = msg.chat.id;
    const text = `
üéØ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

üìû */newcall* - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫
üîó */join [–ö–û–î]* - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∑–≤–æ–Ω–∫—É –ø–æ –∫–æ–¥—É
üìã */mycalls* - –ú–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–≤–æ–Ω–∫–∏
‚ùå */endcall [–ö–û–î]* - –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–≤–æ–Ω–æ–∫

üí° *–ü—Ä–∏–º–µ—Ä—ã:*
\`/join ABC123\` - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∑–≤–æ–Ω–∫—É —Å –∫–æ–¥–æ–º ABC123
\`/endcall ABC123\` - –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–≤–æ–Ω–æ–∫ —Å –∫–æ–¥–æ–º ABC123

üöÄ *–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:*
1. –°–æ–∑–¥–∞–π—Ç–µ –∑–≤–æ–Ω–æ–∫: /newcall
2. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
3. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å 6-—Å–∏–º–≤–æ–ª—å–Ω—ã–º –∫–æ–¥–æ–º —Å –¥—Ä—É–∑—å—è–º–∏
4. –û–Ω–∏ —Å–º–æ–≥—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è: /join –í–ê–®_–ö–û–î
    `;

    bot.sendMessage(chatId, text, { parse_mode: 'Markdown' });
});

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ (–∫–∞–∂–¥—ã–π —á–∞—Å)
setInterval(() => {
    const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString();

    db.run(`DELETE FROM calls WHERE status = 'ended' AND ended_at < ?`, [oneDayAgo], function(err) {
        if (!err && this.changes > 0) {
            console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${this.changes} —Å—Ç–∞—Ä—ã—Ö –∑–≤–æ–Ω–∫–æ–≤`);
        }
    });
}, 60 * 60 * 1000);

console.log('‚úÖ Bot started successfully');